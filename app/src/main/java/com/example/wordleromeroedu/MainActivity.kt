package com.example.wordleromeroedu

import android.graphics.Color
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
// Eduardo Romero 9/15/2022

// Thought Process:
// 1) Identify the words that will be used when coding
// 2) Based on these words, we will retrieve a user's input which will be displayed on the main screen
// 3) Once the user presses the submit button, we will analyze each character individually
// 4) If the character is:
//        Correct/Right Place: 'O'
//        Correct/Wrong Place: '+'
//        Incorrect/Wrong Place: 'X'
//    This will be autogenerated and placed underneath the input of the user
// 4.5) After each iteration of guessing, the:
//      - User input is cleared
//      - Number of tries decreases by 1 (total is 3 at the beginning) Maybe counter associated with 'Submit' button?
//      - Output is cleared (Becomes invisible and will generate new keys 'O', '+', 'X')

// 5) If the user guesses it correctly within 3 tries, then it will send a toast and say they completed the game
//      - The 'Submit' button is disabled, (could turn grey) and game ends
// 5) If the user does not guess it correctly within 3 tries, it will send a toast and say they have not completed the game
//      - The 'Submit' button is disabled, (could turn grey) and game ends

// Notes:
// CREATE A START AND START_OVER BUTTON


// author: calren
object FourLetterWordList {
    // List of most common 4 letter words from: https://7esl.com/4-letter-words/
    val fourLetterWords =
        "Area,Army,Baby,Back,Ball,Band,Bank,Base,Bill,Body,Book,Call,Card,Care,Case,Cash,City,Club,Cost,Date,Deal,Door,Duty,East,Edge,Face,Fact,Farm,Fear,File,Film,Fire,Firm,Fish,Food,Foot,Form,Fund,Game,Girl,Goal,Gold,Hair,Half,Hall,Hand,Head,Help,Hill,Home,Hope,Hour,Idea,Jack,John,Kind,King,Lack,Lady,Land,Life,Line,List,Look,Lord,Loss,Love,Mark,Mary,Mind,Miss,Move,Name,Need,News,Note,Page,Pain,Pair,Park,Part,Past,Path,Paul,Plan,Play,Post,Race,Rain,Rate,Rest,Rise,Risk,Road,Rock,Role,Room,Rule,Sale,Seat,Shop,Show,Side,Sign,Site,Size,Skin,Sort,Star,Step,Task,Team,Term,Test,Text,Time,Tour,Town,Tree,Turn,Type,Unit,User,View,Wall,Week,West,Wife,Will,Wind,Wine,Wood,Word,Work,Year,Bear,Beat,Blow,Burn,Call,Care,Cast,Come,Cook,Cope,Cost,Dare,Deal,Deny,Draw,Drop,Earn,Face,Fail,Fall,Fear,Feel,Fill,Find,Form,Gain,Give,Grow,Hang,Hate,Have,Head,Hear,Help,Hide,Hold,Hope,Hurt,Join,Jump,Keep,Kill,Know,Land,Last,Lead,Lend,Lift,Like,Link,Live,Look,Lose,Love,Make,Mark,Meet,Mind,Miss,Move,Must,Name,Need,Note,Open,Pass,Pick,Plan,Play,Pray,Pull,Push,Read,Rely,Rest,Ride,Ring,Rise,Risk,Roll,Rule,Save,Seek,Seem,Sell,Send,Shed,Show,Shut,Sign,Sing,Slip,Sort,Stay,Step,Stop,Suit,Take,Talk,Tell,Tend,Test,Turn,Vary,View,Vote,Wait,Wake,Walk,Want,Warn,Wash,Wear,Will,Wish,Work,Able,Back,Bare,Bass,Blue,Bold,Busy,Calm,Cold,Cool,Damp,Dark,Dead,Deaf,Dear,Deep,Dual,Dull,Dumb,Easy,Evil,Fair,Fast,Fine,Firm,Flat,Fond,Foul,Free,Full,Glad,Good,Grey,Grim,Half,Hard,Head,High,Holy,Huge,Just,Keen,Kind,Last,Late,Lazy,Like,Live,Lone,Long,Loud,Main,Male,Mass,Mean,Mere,Mild,Nazi,Near,Neat,Next,Nice,Okay,Only,Open,Oral,Pale,Past,Pink,Poor,Pure,Rare,Real,Rear,Rich,Rude,Safe,Same,Sick,Slim,Slow,Soft,Sole,Sore,Sure,Tall,Then,Thin,Tidy,Tiny,Tory,Ugly,Vain,Vast,Very,Vice,Warm,Wary,Weak,Wide,Wild,Wise,Zero,Ably,Afar,Anew,Away,Back,Dead,Deep,Down,Duly,Easy,Else,Even,Ever,Fair,Fast,Flat,Full,Good,Half,Hard,Here,High,Home,Idly,Just,Late,Like,Live,Long,Loud,Much,Near,Nice,Okay,Once,Only,Over,Part,Past,Real,Slow,Solo,Soon,Sure,That,Then,This,Thus,Very,When,Wide"

    // Returns a list of four letter words as a list
    fun getAllFourLetterWords(): List<String> {
        return fourLetterWords.split(",")
    }

    // Returns a random four letter word from the list in all caps
    fun getRandomFourLetterWord(): String {
        val allWords = getAllFourLetterWords()
        val randomNumber = (0..allWords.size).shuffled().last()
        return allWords[randomNumber].uppercase()
    }
}

class MainActivity : AppCompatActivity() {

    // Amount of tries a user has to guess an answer

    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val submit = findViewById<Button>(R.id.submit_button)

        val guess1 = findViewById<TextView>(R.id.guess1)
        val guess2 = findViewById<TextView>(R.id.guess2)
        val guess3 = findViewById<TextView>(R.id.guess3)

        val output1 = findViewById<TextView>(R.id.output1)
        val output2 = findViewById<TextView>(R.id.output2)
        val output3 = findViewById<TextView>(R.id.output3)

        val reset = findViewById<Button>(R.id.reset)

        val editText = findViewById<EditText>(R.id.editText)
        var answer = FourLetterWordList.getRandomFourLetterWord();

        val finale = findViewById<TextView>(R.id.finale)
        val finale2 = findViewById<TextView>(R.id.finale2)
        finale.setText(answer)

        var chances = 3;

        submit.setOnClickListener {

            val userCreate = editText.getText().toString().uppercase();

            if(userCreate == answer){
                Toast.makeText(it.context, "YOU HAVE GUESSED THE RIGHT WORD!", Toast.LENGTH_SHORT).show();

            } else {
                if(chances == 3){
                guess1.setText(userCreate.uppercase())
                output1.setText(checkGuess(userCreate, answer))
                }
                if(chances == 2){
                    guess2.setText(userCreate.uppercase())
                    output2.setText(checkGuess(userCreate, answer))
                }
                if(chances <= 1){
                    guess3.setText(userCreate.uppercase())
                    output3.setText(checkGuess(userCreate, answer))
                    submit.setBackgroundColor(Color.GRAY);
                    submit.setTextColor(Color.BLACK);
                    finale.visibility = View.VISIBLE;
                    finale2.visibility = View.VISIBLE;
                }
                chances--;
                reset.visibility = View.VISIBLE;
            }

            if(reset.isPressed && reset.visibility == View.VISIBLE){
                chances = 3;
                submit.setBackgroundColor(Color.RED);
                submit.setTextColor(Color.WHITE);
            }
        }
    }
    /**
    * Parameters / Fields:
    *   wordToGuess : String - the target word the user is trying to guess
    *   guess : String - what the user entered as their guess
    *
    * Returns a String of 'O', '+', and 'X', where:
    *   'O' represents the right letter in the right place
    *   '+' represents the right letter in the wrong place
    *   'X' represents a letter not in the target word
    */
        private fun checkGuess(guess: String, wordToGuess: String): String {
            var result = ""
            for (i in 0..3) {
            if (guess[i] == wordToGuess[i]) {
                result += "O"
            }
            else if (guess[i] in wordToGuess) {
                result += "+"
            }
            else {
             result += "X"
            }
        }
        return result
        }
}